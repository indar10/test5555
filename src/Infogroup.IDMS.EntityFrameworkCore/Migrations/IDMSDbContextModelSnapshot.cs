// <auto-generated />
using System;
using Infogroup.IDMS.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infogroup.IDMS.Migrations
{
    [DbContext(typeof(IDMSDbContext))]
    partial class IDMSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Edition");
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000);

                    b.Property<string>("Exception")
                        .HasMaxLength(2000);

                    b.Property<int>("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256);

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024);

                    b.Property<string>("ReturnValue");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsGranted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<long?>("UserLinkId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("AbpUserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<byte>("Result");

                    b.Property<string>("TenancyName")
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("AbpUserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsAbandoned");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576);

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime?>("LastTryTime");

                    b.Property<DateTime>("NextTryTime");

                    b.Property<byte>("Priority");

                    b.Property<short>("TryCount");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name", "UserId")
                        .IsUnique();

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangeTime");

                    b.Property<byte>("ChangeType");

                    b.Property<long>("EntityChangeSetId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(48);

                    b.Property<string>("EntityTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("ExtensionData");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("Reason")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpEntityChangeSets");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EntityChangeId");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(96);

                    b.Property<string>("PropertyTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Abp.IdentityServer4.PersistedGrantEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("AbpPersistedGrants");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpLanguages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(67108864);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("AbpLanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("ExcludedUserIds")
                        .HasMaxLength(131072);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<string>("TenantIds")
                        .HasMaxLength(131072);

                    b.Property<string>("UserIds")
                        .HasMaxLength(131072);

                    b.HasKey("Id");

                    b.ToTable("AbpNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("AbpNotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AbpTenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<Guid>("TenantNotificationId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("AbpUserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long?>("ParentId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnitRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "RoleId");

                    b.ToTable("AbpOrganizationUnitRoles");
                });

            modelBuilder.Entity("Infogroup.IDMS.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsStatic");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("Infogroup.IDMS.Authorization.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AuthenticationSource")
                        .HasMaxLength(64);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(328);

                    b.Property<string>("GoogleAuthenticatorKey");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<bool>("IsLockoutEnabled");

                    b.Property<bool>("IsPhoneNumberConfirmed");

                    b.Property<bool>("IsTwoFactorEnabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime?>("LockoutEndDateUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(328);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32);

                    b.Property<Guid?>("ProfilePictureId");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(128);

                    b.Property<bool>("ShouldChangePasswordOnNextLogin");

                    b.Property<string>("SignInToken");

                    b.Property<DateTime?>("SignInTokenExpireTimeUtc");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("Infogroup.IDMS.BuildTableLayouts.BuildTableLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildTableId");

                    b.Property<string>("LK_IndexType")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("cCreatedBy")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("cDataType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("cFieldDescription")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("cFieldName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("cGroupName")
                        .HasMaxLength(50);

                    b.Property<string>("cModifiedBy")
                        .HasMaxLength(25);

                    b.Property<string>("cNormFieldName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("dCreatedDate");

                    b.Property<DateTime?>("dModifiedDate");

                    b.Property<bool>("iAllowExport");

                    b.Property<bool>("iAllowMaxPer");

                    b.Property<bool>("iAllowSorting");

                    b.Property<bool>("iAuditType");

                    b.Property<int>("iDataLength");

                    b.Property<bool>("iDisplayOrder");

                    b.Property<bool>("iFileOperations");

                    b.Property<bool>("iIsBillable");

                    b.Property<bool>("iIsEnhancement");

                    b.Property<bool>("iIsListSpecific");

                    b.Property<bool>("iIsMailerSpecific");

                    b.Property<bool>("iIsMappingAllowed");

                    b.Property<bool>("iIsMappingRequired");

                    b.Property<bool>("iIsNormalized");

                    b.Property<bool>("iIsRebuildDD");

                    b.Property<bool>("iIsSelectable");

                    b.Property<bool>("iIsSystem");

                    b.Property<int?>("iKeyColumn");

                    b.Property<bool>("iLayoutOrder");

                    b.Property<bool>("iShowDefault");

                    b.Property<bool>("iShowListBox");

                    b.Property<bool>("iShowTextBox");

                    b.HasKey("Id");

                    b.HasIndex("BuildTableId");

                    b.ToTable("BuildTableLayouts");
                });

            modelBuilder.Entity("Infogroup.IDMS.BuildTables.BuildTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildId");

                    b.Property<string>("LK_JoinType")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("LK_TableType")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("cCreatedBy")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("cJoinOn")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("cModifiedBy")
                        .HasMaxLength(25);

                    b.Property<string>("cTableName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ctabledescription")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("dCreatedDate");

                    b.Property<string>("dModifiedDate");

                    b.HasKey("Id");

                    b.HasIndex("BuildId");

                    b.ToTable("BuildTables");
                });

            modelBuilder.Entity("Infogroup.IDMS.Builds.Build", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DatabaseId");

                    b.Property<int>("LK_BuildPriority");

                    b.Property<string>("LK_BuildStatus")
                        .HasMaxLength(2);

                    b.Property<string>("cBuild")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<string>("cCreatedBy")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("cDescription")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("cMailDateFROM")
                        .HasMaxLength(6);

                    b.Property<string>("cMailDateTO")
                        .HasMaxLength(6);

                    b.Property<string>("cModifiedBy")
                        .HasMaxLength(25);

                    b.Property<DateTime>("dCreatedDate");

                    b.Property<DateTime?>("dMailDate");

                    b.Property<DateTime?>("dModifiedDate");

                    b.Property<DateTime?>("dScheduledDateTime");

                    b.Property<bool>("iIsOnDisk");

                    b.Property<bool>("iIsOneStep");

                    b.Property<bool>("iIsReadyToUse");

                    b.Property<int?>("iPreviousBuildID");

                    b.Property<int>("iRecordCount");

                    b.Property<bool>("iStopRequested");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseId");

                    b.ToTable("tblBuild");
                });

            modelBuilder.Entity("Infogroup.IDMS.Campaigns.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildID");

                    b.Property<int>("DivisionBrokerID");

                    b.Property<int>("DivisionMailerID");

                    b.Property<string>("LK_ExportFileFormatID")
                        .HasMaxLength(3);

                    b.Property<string>("LK_Media")
                        .HasMaxLength(2);

                    b.Property<int>("MailerID");

                    b.Property<int>("OfferID");

                    b.Property<int>("UserID");

                    b.Property<string>("cBrokerPONo")
                        .HasMaxLength(30);

                    b.Property<string>("cChannelType")
                        .HasMaxLength(1);

                    b.Property<string>("cCreatedBy")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("cDatabaseName")
                        .HasMaxLength(80);

                    b.Property<string>("cDecoyKey")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("cDecoyKey1")
                        .HasMaxLength(25);

                    b.Property<bool>("cDecoysByKeycode");

                    b.Property<string>("cDescription")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("cExportLayout")
                        .HasMaxLength(50);

                    b.Property<string>("cFileLabel")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("cLVAOrderNo")
                        .HasMaxLength(25);

                    b.Property<string>("cMaxPerFieldOrderLevel")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("cModifiedBy")
                        .HasMaxLength(25);

                    b.Property<string>("cNextMarkOrderNo")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("cNotes");

                    b.Property<string>("cOfferName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("cOrderNo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("cOrderType")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("cOutputCase");

                    b.Property<string>("cSANNumber")
                        .HasMaxLength(30);

                    b.Property<string>("cShipCCEmail");

                    b.Property<string>("cShipSUBJECT")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("cShipTOEmail");

                    b.Property<string>("cShiptoType")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("cSortFields")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("cSpecialProcess");

                    b.Property<DateTime>("dCreatedDate");

                    b.Property<DateTime?>("dDateLastRun")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("dMailDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("dModifiedDate");

                    b.Property<DateTime?>("dShipDateShipped");

                    b.Property<int?>("iAvailableQty");

                    b.Property<int>("iDecoyKeyMethod");

                    b.Property<int>("iDecoyQty");

                    b.Property<bool?>("iHouseFilePriority");

                    b.Property<bool?>("iIsAddHeader");

                    b.Property<bool?>("iIsExportDataFileOnly");

                    b.Property<bool>("iIsNetUse");

                    b.Property<bool?>("iIsNoUsage");

                    b.Property<bool>("iIsOrder");

                    b.Property<bool>("iIsRandomExecution");

                    b.Property<int?>("iMailDateMinus");

                    b.Property<int?>("iMailDatePlus");

                    b.Property<int>("iMaxQuantityOrderLevelMaxPer");

                    b.Property<int>("iMinQuantityOrderLevelMaxPer");

                    b.Property<int>("iProvidedCount");

                    b.Property<int?>("iSplitIntoNParts");

                    b.Property<int?>("iSplitType");

                    b.HasKey("Id");

                    b.ToTable("tblOrder");
                });

            modelBuilder.Entity("Infogroup.IDMS.Chat.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(4096);

                    b.Property<int>("ReadState");

                    b.Property<int>("ReceiverReadState");

                    b.Property<Guid?>("SharedMessageId");

                    b.Property<int>("Side");

                    b.Property<int?>("TargetTenantId");

                    b.Property<long>("TargetUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TargetTenantId", "TargetUserId", "ReadState");

                    b.HasIndex("TargetTenantId", "UserId", "ReadState");

                    b.HasIndex("TenantId", "TargetUserId", "ReadState");

                    b.HasIndex("TenantId", "UserId", "ReadState");

                    b.ToTable("AppChatMessages");
                });

            modelBuilder.Entity("Infogroup.IDMS.Databases.Database", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DivisionId");

                    b.Property<string>("LK_AccountingDivisionCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("LK_DatabaseType")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("cAdministratorEmail")
                        .HasMaxLength(80);

                    b.Property<string>("cCreatedBy")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("cDatabaseName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("cListFileUploadedPath")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("cListReadyToLoadPath")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("cModifiedBy")
                        .HasMaxLength(25);

                    b.Property<DateTime>("dCreatedDate");

                    b.Property<DateTime?>("dModifiedDate");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("tblDatabase");
                });

            modelBuilder.Entity("Infogroup.IDMS.Divisions.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("cAddress1")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("cAddress2")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("cCity")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("cCreatedBy")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("cDivisionDescription")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("cDivisionName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("cEmail")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("cFax")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("cLogoPath")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("cModifiedBy")
                        .HasMaxLength(25);

                    b.Property<string>("cOfferPath")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("cPhone")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("cState")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("cStatus")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("cZip")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("dCreatedDate");

                    b.Property<DateTime?>("dModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("tblDivision");
                });

            modelBuilder.Entity("Infogroup.IDMS.Friendships.Friendship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid?>("FriendProfilePictureId");

                    b.Property<string>("FriendTenancyName");

                    b.Property<int?>("FriendTenantId");

                    b.Property<long>("FriendUserId");

                    b.Property<string>("FriendUserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FriendTenantId", "FriendUserId");

                    b.HasIndex("FriendTenantId", "UserId");

                    b.HasIndex("TenantId", "FriendUserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AppFriendships");
                });

            modelBuilder.Entity("Infogroup.IDMS.Lookups.Lookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("cCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("cCreatedBy")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("cDescription")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("cField")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("cLookupValue")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("cModifiedBy")
                        .HasMaxLength(25);

                    b.Property<DateTime>("dCreatedDate");

                    b.Property<DateTime?>("dModifiedDate");

                    b.Property<int>("iField");

                    b.Property<bool>("iIsActive");

                    b.Property<int>("iOrderBy");

                    b.Property<string>("mField");

                    b.HasKey("Id");

                    b.ToTable("tblLookup");
                });

            modelBuilder.Entity("Infogroup.IDMS.MultiTenancy.Accounting.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("TenantAddress");

                    b.Property<string>("TenantLegalName");

                    b.Property<string>("TenantTaxNo");

                    b.HasKey("Id");

                    b.ToTable("AppInvoices");
                });

            modelBuilder.Entity("Infogroup.IDMS.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("DayCount");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<int>("EditionId");

                    b.Property<string>("ErrorUrl");

                    b.Property<string>("ExternalPaymentId");

                    b.Property<int>("Gateway");

                    b.Property<string>("InvoiceNo");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRecurring");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("PaymentPeriodType");

                    b.Property<int>("Status");

                    b.Property<string>("SuccessUrl");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EditionId");

                    b.HasIndex("ExternalPaymentId", "Gateway");

                    b.HasIndex("Status", "CreationTime");

                    b.ToTable("AppSubscriptionPayments");
                });

            modelBuilder.Entity("Infogroup.IDMS.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<Guid?>("CustomCssId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("EditionId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsInTrialPeriod");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LogoFileType")
                        .HasMaxLength(64);

                    b.Property<Guid?>("LogoId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("SubscriptionEndDateUtc");

                    b.Property<int>("SubscriptionPaymentType");

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreationTime");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SubscriptionEndDateUtc");

                    b.HasIndex("TenancyName");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("Infogroup.IDMS.OrderStatuss.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderID");

                    b.Property<string>("cCreatedBy")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("cModifiedBy")
                        .HasMaxLength(25);

                    b.Property<string>("cNotes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("dCreatedDate");

                    b.Property<DateTime?>("dModifiedDate");

                    b.Property<bool>("iIsCurrent");

                    b.Property<int>("iStatus");

                    b.Property<bool?>("iStopRequested");

                    b.HasKey("Id");

                    b.HasIndex("OrderID");

                    b.ToTable("tblOrderStatus");
                });

            modelBuilder.Entity("Infogroup.IDMS.Segments.Segment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId");

                    b.Property<string>("cCreatedBy")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("cDescription")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("cFixedTitle")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("cKeyCode1")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("cKeyCode2")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("cMaxPerGroup")
                        .HasMaxLength(2);

                    b.Property<string>("cModifiedBy")
                        .HasMaxLength(25);

                    b.Property<string>("cTitleSuppression")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<DateTime?>("dCreatedDate")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("dModifiedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("iAvailableQty");

                    b.Property<int>("iDedupeOrderSpecified");

                    b.Property<int>("iDedupeOrderUsed");

                    b.Property<int>("iDoubleMultiBuyerCount");

                    b.Property<int>("iGroup");

                    b.Property<bool>("iIsOrderLevel");

                    b.Property<bool>("iIsRandomRadiusNth");

                    b.Property<int>("iOutputQty");

                    b.Property<int>("iProvidedQty");

                    b.Property<int>("iRequiredQty");

                    b.Property<bool>("iUseAutosuppress");

                    b.HasKey("Id");

                    b.ToTable("tblSegment");
                });

            modelBuilder.Entity("Infogroup.IDMS.Segments.SegmentSelection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SegmentId");

                    b.Property<string>("cCreatedBy")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("cDescriptions")
                        .IsRequired();

                    b.Property<string>("cFileName");

                    b.Property<string>("cGrouping")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("cJoinOperator")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("cModifiedBy")
                        .HasMaxLength(25);

                    b.Property<string>("cQuestionDescription")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("cQuestionFieldName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("cSystemFileName");

                    b.Property<string>("cTableName");

                    b.Property<string>("cValueMode")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("cValueOperator")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("cValues")
                        .IsRequired();

                    b.Property<DateTime?>("dCreatedDate")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("dModifiedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("iGroupNumber");

                    b.Property<int>("iGroupOrder");

                    b.HasKey("Id");

                    b.ToTable("tblSegmentSelection");
                });

            modelBuilder.Entity("Infogroup.IDMS.Storage.BinaryObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Bytes")
                        .IsRequired();

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AppBinaryObjects");
                });

            modelBuilder.Entity("Infogroup.IDMS.Editions.SubscribableEdition", b =>
                {
                    b.HasBaseType("Abp.Application.Editions.Edition");

                    b.Property<decimal?>("AnnualPrice");

                    b.Property<decimal?>("DailyPrice");

                    b.Property<int?>("ExpiringEditionId");

                    b.Property<decimal?>("MonthlyPrice");

                    b.Property<int?>("TrialDayCount");

                    b.Property<int?>("WaitingDayAfterExpire");

                    b.Property<decimal?>("WeeklyPrice");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator().HasValue("SubscribableEdition");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("Infogroup.IDMS.Authorization.Roles.Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("Infogroup.IDMS.Authorization.Users.User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("Infogroup.IDMS.Authorization.Users.User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.HasOne("Infogroup.IDMS.Authorization.Users.User")
                        .WithMany("OrganizationUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("Infogroup.IDMS.Authorization.Users.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("Infogroup.IDMS.Authorization.Users.User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("Infogroup.IDMS.Authorization.Users.User")
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet")
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange")
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Infogroup.IDMS.Authorization.Roles.Role", b =>
                {
                    b.HasOne("Infogroup.IDMS.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Infogroup.IDMS.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Infogroup.IDMS.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Infogroup.IDMS.Authorization.Users.User", b =>
                {
                    b.HasOne("Infogroup.IDMS.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Infogroup.IDMS.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Infogroup.IDMS.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Infogroup.IDMS.BuildTableLayouts.BuildTableLayout", b =>
                {
                    b.HasOne("Infogroup.IDMS.BuildTables.BuildTable", "BuildTable")
                        .WithMany()
                        .HasForeignKey("BuildTableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Infogroup.IDMS.BuildTables.BuildTable", b =>
                {
                    b.HasOne("Infogroup.IDMS.Builds.Build", "Build")
                        .WithMany()
                        .HasForeignKey("BuildId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Infogroup.IDMS.Builds.Build", b =>
                {
                    b.HasOne("Infogroup.IDMS.Databases.Database", "Database")
                        .WithMany()
                        .HasForeignKey("DatabaseId");
                });

            modelBuilder.Entity("Infogroup.IDMS.Databases.Database", b =>
                {
                    b.HasOne("Infogroup.IDMS.Divisions.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId");
                });

            modelBuilder.Entity("Infogroup.IDMS.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Infogroup.IDMS.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("Infogroup.IDMS.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Infogroup.IDMS.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("Infogroup.IDMS.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Infogroup.IDMS.OrderStatuss.OrderStatus", b =>
                {
                    b.HasOne("Infogroup.IDMS.Campaigns.Campaign", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("Infogroup.IDMS.Authorization.Roles.Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("Infogroup.IDMS.Authorization.Users.User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
